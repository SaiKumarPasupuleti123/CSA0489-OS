#include <stdio.h>
#include <stdlib.h>

#define MEMORY_SIZE 1000 // Total memory size

// Structure to represent a memory block
typedef struct MemoryBlock {
    int id; // Process ID
    int size; // Size of memory block
    int allocated; // Flag to indicate if the block is allocated
} MemoryBlock;

// Function to allocate memory using worst-fit algorithm
void allocateMemory(MemoryBlock memory[], int n, int processId, int processSize) {
    int i, j, largestSize = -1, index = -1;

    // Find the largest available block
    for (i = 0; i < n; i++) {
        if (!memory[i].allocated && memory[i].size >= processSize && memory[i].size > largestSize) {
            largestSize = memory[i].size;
            index = i;
        }
    }

    if (index != -1) {
        // Allocate memory to the process
        memory[index].allocated = 1;
        memory[index].id = processId;
        printf("Memory allocated successfully for Process %d\n", processId);
    } else {
        printf("Memory allocation failed for Process %d\n", processId);
    }
}

// Function to deallocate memory
void deallocateMemory(MemoryBlock memory[], int n, int processId) {
    for (int i = 0; i < n; i++) {
        if (memory[i].id == processId) {
            memory[i].allocated = 0;
            printf("Memory deallocated successfully for Process %d\n", processId);
            return;
        }
    }
    printf("Process %d not found\n", processId);
}

// Function to display memory status
void displayMemoryStatus(MemoryBlock memory[], int n) {
    printf("Memory Status:\n");
    for (int i = 0; i < n; i++) {
        printf("Block %d: Size: %d, Allocated: %s\n", i, memory[i].size, memory[i].allocated ? "Yes" : "No");
    }
}

int main() {
    int n;
    printf("Enter the number of memory blocks: ");
    scanf("%d", &n);

    MemoryBlock memory[n];

    // Initialize memory blocks
    for (int i = 0; i < n; i++) {
        printf("Enter size of Block %d: ", i);
        scanf("%d", &memory[i].size);
        memory[i].allocated = 0;
    }

    int choice, processId, processSize;

    do {
        printf("\n1. Allocate Memory\n");
        printf("2. Deallocate Memory\n");
        printf("3. Display Memory Status\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter Process ID: ");
                scanf("%d", &processId);
                printf("Enter Process Size: ");
                scanf("%d", &processSize);
                allocateMemory(memory, n, processId, processSize);
                break;
            case 2:
                printf("Enter Process ID to deallocate: ");
                scanf("%d", &processId);
                deallocateMemory(memory, n, processId);
                break;
            case 3:
                displayMemoryStatus(memory, n);
                break;
            case 4:
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid choice\n");
        }
    } while (choice != 4);

    return 0;
}
