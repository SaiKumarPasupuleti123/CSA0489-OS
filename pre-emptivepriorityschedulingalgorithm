#include <stdio.h>

#define MAX_PROCESSES 10

// Process structure
struct Process {
    int id;
    int arrival_time;
    int burst_time;
    int priority;
    int remaining_time;
    int waiting_time;
    int turnaround_time;
    int executed;
};

// Function to perform preemptive priority scheduling
void preemptivePriorityScheduling(struct Process processes[], int n) {
    int currentTime = 0;
    int totalExecuted = 0;

    while (totalExecuted < n) {
        int highestPriority = 9999;
        int selectedProcess = -1;

        // Find process with highest priority that has arrived and not executed
        for (int i = 0; i < n; i++) {
            if (processes[i].arrival_time <= currentTime && !processes[i].executed &&
                processes[i].priority < highestPriority) {
                highestPriority = processes[i].priority;
                selectedProcess = i;
            }
        }

        if (selectedProcess == -1) {
            currentTime++;
            continue;
        }

        // Execute the selected process for 1 unit of time
        processes[selectedProcess].remaining_time--;
        currentTime++;

        if (processes[selectedProcess].remaining_time == 0) {
            // Update waiting time and turnaround time
            processes[selectedProcess].turnaround_time = currentTime - processes[selectedProcess].arrival_time;
            processes[selectedProcess].waiting_time = processes[selectedProcess].turnaround_time - processes[selectedProcess].burst_time;
            processes[selectedProcess].executed = 1;
            totalExecuted++;
        }
    }
}

// Function to calculate and display average waiting time and turnaround time
void displayAverageTimes(struct Process processes[], int n) {
    float totalWaitingTime = 0, totalTurnaroundTime = 0;

    printf("\nProcess\tWaiting Time\tTurnaround Time\n");

    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\n", processes[i].id, processes[i].waiting_time, processes[i].turnaround_time);
        totalWaitingTime += processes[i].waiting_time;
        totalTurnaroundTime += processes[i].turnaround_time;
    }

    printf("\nAverage Waiting Time: %.2f\n", totalWaitingTime / n);
    printf("Average Turnaround Time: %.2f\n", totalTurnaroundTime / n);
}

int main() {
    int n;
    struct Process processes[MAX_PROCESSES];

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    // Input process details
    for (int i = 0; i < n; i++) {
        printf("Process %d:\n", i + 1);
        processes[i].id = i + 1;
        printf("  Arrival Time: ");
        scanf("%d", &processes[i].arrival_time);
        printf("  Burst Time: ");
        scanf("%d", &processes[i].burst_time);
        printf("  Priority: ");
        scanf("%d", &processes[i].priority);
        processes[i].remaining_time = processes[i].burst_time;
        processes[i].executed = 0;
    }

    // Perform preemptive priority scheduling
    preemptivePriorityScheduling(processes, n);

    // Display average waiting time and turnaround time
    displayAverageTimes(processes, n);

    return 0;
}
