#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>

#define NUM_READERS 5
#define NUM_WRITERS 2

sem_t mutex;            // Semaphore for mutual exclusion
sem_t writerSemaphore;  // Semaphore for controlling access for writers
int readersCount = 0;   // Count of active readers

// Function prototypes
void *reader(void *arg);
void *writer(void *arg);

int main() {
    pthread_t readerThreads[NUM_READERS];
    pthread_t writerThreads[NUM_WRITERS];

    // Initialize semaphores
    sem_init(&mutex, 0, 1);
    sem_init(&writerSemaphore, 0, 1);

    // Create reader threads
    for (int i = 0; i < NUM_READERS; i++) {
        pthread_create(&readerThreads[i], NULL, reader, (void *)&i);
    }

    // Create writer threads
    for (int i = 0; i < NUM_WRITERS; i++) {
        pthread_create(&writerThreads[i], NULL, writer, (void *)&i);
    }

    // Join reader threads
    for (int i = 0; i < NUM_READERS; i++) {
        pthread_join(readerThreads[i], NULL);
    }

    // Join writer threads
    for (int i = 0; i < NUM_WRITERS; i++) {
        pthread_join(writerThreads[i], NULL);
    }

    // Destroy semaphores
    sem_destroy(&mutex);
    sem_destroy(&writerSemaphore);

    return 0;
}

// Reader thread function
void *reader(void *arg) {
    int id = *((int *)arg);
    while (1) {
        // Acquire mutex to update readersCount
        sem_wait(&mutex);
        readersCount++;
        if (readersCount == 1) {
            // First reader, acquire writerSemaphore to block writers
            sem_wait(&writerSemaphore);
        }
        sem_post(&mutex);

        // Reading the resource
        printf("Reader %d is reading...\n", id);
        sleep(1); // Simulate reading

        // Release mutex
        sem_wait(&mutex);
        readersCount--;
        if (readersCount == 0) {
            // Last reader, release writerSemaphore to allow writers
            sem_post(&writerSemaphore);
        }
        sem_post(&mutex);

        // Sleep for a while before reading again
        sleep(rand() % 3);
    }
    pthread_exit(NULL);
}

// Writer thread function
void *writer(void *arg) {
    int id = *((int *)arg);
    while (1) {
        // Acquire writerSemaphore to ensure exclusive access for writers
        sem_wait(&writerSemaphore);

        // Writing to the resource
        printf("Writer %d is writing...\n", id);
        sleep(2); // Simulate writing

        // Release writerSemaphore
        sem_post(&writerSemaphore);

        // Sleep for a while before writing again
        sleep(rand() % 5);
    }
    pthread_exit(NULL);
}
