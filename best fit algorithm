#include <stdio.h>
#include <stdlib.h>

#define MAX_PARTITIONS 100

// Structure representing a memory partition
struct Partition {
    int id;
    int size;
    int allocated;
};

// Function to allocate memory using Best Fit algorithm
void bestFit(struct Partition partitions[], int n, int process_id, int process_size) {
    int best_fit_index = -1;
    int min_fragmentation = __INT_MAX__;

    // Find the best fit partition
    for (int i = 0; i < n; i++) {
        if (!partitions[i].allocated && partitions[i].size >= process_size) {
            int fragmentation = partitions[i].size - process_size;
            if (fragmentation < min_fragmentation) {
                min_fragmentation = fragmentation;
                best_fit_index = i;
            }
        }
    }

    // Allocate memory if a suitable partition is found
    if (best_fit_index != -1) {
        partitions[best_fit_index].allocated = 1;
        printf("Process %d allocated to Partition %d\n", process_id, partitions[best_fit_index].id);
    } else {
        printf("Insufficient memory to allocate Process %d\n", process_id);
    }
}

int main() {
    int n, m;
    struct Partition partitions[MAX_PARTITIONS];

    printf("Enter the number of memory partitions: ");
    scanf("%d", &n);

    // Input memory partition details
    for (int i = 0; i < n; i++) {
        printf("Partition %d:\n", i + 1);
        partitions[i].id = i + 1;
        printf("  Size: ");
        scanf("%d", &partitions[i].size);
        partitions[i].allocated = 0;
    }

    printf("Enter the number of processes: ");
    scanf("%d", &m);

    // Input process details and allocate memory
    for (int i = 0; i < m; i++) {
        int process_size;
        printf("Enter the size of Process %d: ", i + 1);
        scanf("%d", &process_size);
        bestFit(partitions, n, i + 1, process_size);
    }

    return 0;
}
